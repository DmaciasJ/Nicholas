import requests
import json
import numpy  # Added numpy
import pandas  # Added pandas
import speech_recognition as sr
import pyttsx3
from datetime import datetime  # For timestamps

# Initialize the text-to-speech engine
tts_engine = pyttsx3.init()

def speak(text):
    """Convert text to speech."""
    tts_engine.say(text)
    tts_engine.runAndWait()

def chat_with_bot(prompt, history):
    try:
        # Combine the conversation history with the current prompt
        full_prompt = "\n".join(history + [f"You: {prompt}", "Bot:"])
        
        response = requests.post(
            "http://localhost:11434/api/generate",  # Ollama's local API endpoint
            json={"model": "llama3.1", "prompt": full_prompt},
            stream=True  # Enable streaming response
        )
        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx and 5xx)
        
        # Process the streamed response
        full_response = ""
        for line in response.iter_lines():
            if line:  # Ignore empty lines
                try:
                    json_line = json.loads(line.decode("utf-8"))  # Parse each line as JSON
                    if "response" in json_line:
                        full_response += json_line["response"]
                    if json_line.get("done", False):  # Stop if "done" is true
                        break
                except json.JSONDecodeError:
                    return f"Invalid JSON in stream: {line.decode('utf-8')}"
        
        return full_response if full_response else "No response received."
    
    except requests.exceptions.RequestException as e:
        return f"Request failed: {e}"

def start_chat():
    print("Chat with Bot! Say 'exit' to end the chat.")
    conversation_history = []  # List to store the conversation history
    conversation_log = pandas.DataFrame(columns=["Timestamp", "Speaker", "Message"])  # DataFrame to log conversations
    recognizer = sr.Recognizer()  # Initialize the speech recognizer
    
    while True:
        try:
            # Capture audio input from the microphone
            with sr.Microphone() as source:
                print("Listening...")
                audio = recognizer.listen(source)
                user_input = recognizer.recognize_google(audio)
                print(f"You: {user_input}")
        except sr.UnknownValueError:
            print("Sorry, I didn't catch that. Please try again.")
            continue
        except sr.RequestError as e:
            print(f"Speech recognition service error: {e}")
            continue

        if user_input.lower() == "exit":
            print("Exiting chat. Goodbye!")
            speak("Goodbye!")
            break
        
        # Get the response from Bot
        response = chat_with_bot(user_input, conversation_history)
        
        # Log the conversation with timestamps
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        conversation_history.append(f"You: {user_input}")
        conversation_history.append(f"Bot: {response}")
        conversation_log = pandas.concat([
            conversation_log,
            pandas.DataFrame([
                {"Timestamp": timestamp, "Speaker": "User", "Message": user_input},
                {"Timestamp": timestamp, "Speaker": "Bot", "Message": response}
            ])
        ], ignore_index=True)
        
        # Print and speak the response
        print("Bot:", response)
        speak(response)
    
    # Save the conversation log to a CSV file
    try:
        conversation_log.to_csv("conversation_log.csv", index=False, mode="w", encoding="utf-8-sig")
        print("Conversation log saved to 'conversation_log.csv'.")
    except Exception as e:
        print(f"Failed to save conversation log: {e}")

# Start the chat
if __name__ == "__main__":
    start_chat()